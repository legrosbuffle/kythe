// Code generated by protoc-gen-gogo.
// source: kythe/proto/common.proto
// DO NOT EDIT!

/*
	Package common_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/common.proto

	It has these top-level messages:
		Fact
		Point
		Span
		NodeInfo
		Diagnostic
		Link
		MarkedSource
*/
package common_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarkedSource_Kind int32

const (
	// This node only contains other nodes and has no special semantics.
	MarkedSource_BOX MarkedSource_Kind = 0
	// This node dominates nodes that should be classified as types.
	MarkedSource_TYPE MarkedSource_Kind = 1
	// This node dominates nodes that should be classified as parameters.
	MarkedSource_PARAMETER MarkedSource_Kind = 2
	// This node dominates nodes that should be classified as identifiers.
	MarkedSource_IDENTIFIER MarkedSource_Kind = 3
	// This node dominates nodes that should be classified as context.
	MarkedSource_CONTEXT MarkedSource_Kind = 4
	// This node dominates nodes that should be classified as initializers.
	MarkedSource_INITIALIZER MarkedSource_Kind = 5
	// Substitute this node with a PARAMETER formed from the param edges from
	// the context node starting with `lookup_index`.
	MarkedSource_PARAMETER_LOOKUP_BY_PARAM MarkedSource_Kind = 6
	// Substitute this node with the marked source derived from the
	// `lookup_index`th param edge of the context node.
	MarkedSource_LOOKUP_BY_PARAM MarkedSource_Kind = 7
	// Substitute this node with a PARAMETER formed from the param edges from
	// the context node starting with `lookup_index`. Checks the context
	// node for a `param/default` fact and uses that to set the
	// first_default_child field.
	MarkedSource_PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS MarkedSource_Kind = 8
)

var MarkedSource_Kind_name = map[int32]string{
	0: "BOX",
	1: "TYPE",
	2: "PARAMETER",
	3: "IDENTIFIER",
	4: "CONTEXT",
	5: "INITIALIZER",
	6: "PARAMETER_LOOKUP_BY_PARAM",
	7: "LOOKUP_BY_PARAM",
	8: "PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS",
}
var MarkedSource_Kind_value = map[string]int32{
	"BOX":                                     0,
	"TYPE":                                    1,
	"PARAMETER":                               2,
	"IDENTIFIER":                              3,
	"CONTEXT":                                 4,
	"INITIALIZER":                             5,
	"PARAMETER_LOOKUP_BY_PARAM":               6,
	"LOOKUP_BY_PARAM":                         7,
	"PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS": 8,
}

func (x MarkedSource_Kind) String() string {
	return proto.EnumName(MarkedSource_Kind_name, int32(x))
}
func (MarkedSource_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6, 0} }

// Fact represents a single key/value fact from the graph.
type Fact struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Fact) Reset()                    { *m = Fact{} }
func (m *Fact) String() string            { return proto.CompactTextString(m) }
func (*Fact) ProtoMessage()               {}
func (*Fact) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *Fact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Fact) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// A Point represents a location within a file or buffer.
//
// If line_number ≤ 0, the line number and column offset are considered
// unknown and will be ignored.
//
// A point with line_number > 0 is said to be _normalized_ if it satisfies
// the constraint 0 ≤ column_offset ≤ bytelen(line_number); that is, if the
// column_offset is within the actual range of the corresponding line.  A
// point can be normalized by adjusting line_number and column_offset so that
// this constraint is satisfied.  This may be impossible if the column offset
// exceeds the bounds of the file.
type Point struct {
	// The offset in bytes from the beginning of the file.
	// Requires 0 ≤ byte_offset ≤ len(file).
	ByteOffset int32 `protobuf:"varint,1,opt,name=byte_offset,json=byteOffset,proto3" json:"byte_offset,omitempty"`
	// The line number containing the point, 1-based.
	LineNumber int32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// The byte offset of the point within its line.
	ColumnOffset int32 `protobuf:"varint,3,opt,name=column_offset,json=columnOffset,proto3" json:"column_offset,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *Point) GetByteOffset() int32 {
	if m != nil {
		return m.ByteOffset
	}
	return 0
}

func (m *Point) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *Point) GetColumnOffset() int32 {
	if m != nil {
		return m.ColumnOffset
	}
	return 0
}

// A Span represents an inclusive-exclusive range inside of a file or buffer.
type Span struct {
	Start *Point `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *Point `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *Span) GetStart() *Point {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Span) GetEnd() *Point {
	if m != nil {
		return m.End
	}
	return nil
}

type NodeInfo struct {
	// The matching facts known for that node, a map from fact name to value.
	Facts map[string][]byte `protobuf:"bytes,2,rep,name=facts" json:"facts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If known and unambiguous, an anchor ticket for this node's definition
	// location.
	// Tickets are Kythe URIs (http://www.kythe.io/docs/kythe-uri-spec.html).
	Definition string `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *NodeInfo) GetFacts() map[string][]byte {
	if m != nil {
		return m.Facts
	}
	return nil
}

func (m *NodeInfo) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

type Diagnostic struct {
	// Text span to which the diagnostic applies.  If the span is unset, the
	// diagnostic refers to its entire parent context (i.e. the file to which it
	// is attached).
	Span *Span `protobuf:"bytes,1,opt,name=span" json:"span,omitempty"`
	// Plain-text diagnostic message to be reported to users.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Optional details that further refine the diagnostic but need not be
	// reported to users immediately.  This field can be used to provide more
	// context for bug reports and may contain compiler/build errors.
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	// Optional URL leading to more detailed information on this diagnostic.  This
	// may be documentation on a particular class of errors or a tracking issue
	// for prevalent errors.
	ContextUrl string `protobuf:"bytes,4,opt,name=context_url,json=contextUrl,proto3" json:"context_url,omitempty"`
}

func (m *Diagnostic) Reset()                    { *m = Diagnostic{} }
func (m *Diagnostic) String() string            { return proto.CompactTextString(m) }
func (*Diagnostic) ProtoMessage()               {}
func (*Diagnostic) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

func (m *Diagnostic) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Diagnostic) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Diagnostic) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Diagnostic) GetContextUrl() string {
	if m != nil {
		return m.ContextUrl
	}
	return ""
}

type Link struct {
	// Semantic tickets for DEFINITION links.
	Definition []string `protobuf:"bytes,3,rep,name=definition" json:"definition,omitempty"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *Link) GetDefinition() []string {
	if m != nil {
		return m.Definition
	}
	return nil
}

// Marked up, source code-like text.
type MarkedSource struct {
	Kind MarkedSource_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=kythe.proto.common.MarkedSource_Kind" json:"kind,omitempty"`
	// Nodes expect to be printed as:
	// pre_text + (child + post_child_text)* + post_text
	// where post_child_text is not included after the final child unless
	// add_final_list_token is asserted. post_child_text should never be
	// printed if there are no children.
	PreText       string          `protobuf:"bytes,2,opt,name=pre_text,json=preText,proto3" json:"pre_text,omitempty"`
	Child         []*MarkedSource `protobuf:"bytes,3,rep,name=child" json:"child,omitempty"`
	PostChildText string          `protobuf:"bytes,4,opt,name=post_child_text,json=postChildText,proto3" json:"post_child_text,omitempty"`
	PostText      string          `protobuf:"bytes,5,opt,name=post_text,json=postText,proto3" json:"post_text,omitempty"`
	LookupIndex   uint32          `protobuf:"varint,6,opt,name=lookup_index,json=lookupIndex,proto3" json:"lookup_index,omitempty"`
	// The default_children_count children at the end of the child list should
	// be considered as "default" or uninteresting.
	DefaultChildrenCount uint32 `protobuf:"varint,7,opt,name=default_children_count,json=defaultChildrenCount,proto3" json:"default_children_count,omitempty"`
	// `add_final_list_token` ensures that `post_child_text` will be
	// included after any nonempty list when that list is followed by additional
	// text.
	AddFinalListToken bool `protobuf:"varint,10,opt,name=add_final_list_token,json=addFinalListToken,proto3" json:"add_final_list_token,omitempty"`
	// Annotations covering this subtree's full span.
	Link []*Link `protobuf:"bytes,11,rep,name=link" json:"link,omitempty"`
}

func (m *MarkedSource) Reset()                    { *m = MarkedSource{} }
func (m *MarkedSource) String() string            { return proto.CompactTextString(m) }
func (*MarkedSource) ProtoMessage()               {}
func (*MarkedSource) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6} }

func (m *MarkedSource) GetKind() MarkedSource_Kind {
	if m != nil {
		return m.Kind
	}
	return MarkedSource_BOX
}

func (m *MarkedSource) GetPreText() string {
	if m != nil {
		return m.PreText
	}
	return ""
}

func (m *MarkedSource) GetChild() []*MarkedSource {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *MarkedSource) GetPostChildText() string {
	if m != nil {
		return m.PostChildText
	}
	return ""
}

func (m *MarkedSource) GetPostText() string {
	if m != nil {
		return m.PostText
	}
	return ""
}

func (m *MarkedSource) GetLookupIndex() uint32 {
	if m != nil {
		return m.LookupIndex
	}
	return 0
}

func (m *MarkedSource) GetDefaultChildrenCount() uint32 {
	if m != nil {
		return m.DefaultChildrenCount
	}
	return 0
}

func (m *MarkedSource) GetAddFinalListToken() bool {
	if m != nil {
		return m.AddFinalListToken
	}
	return false
}

func (m *MarkedSource) GetLink() []*Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func init() {
	proto.RegisterType((*Fact)(nil), "kythe.proto.common.Fact")
	proto.RegisterType((*Point)(nil), "kythe.proto.common.Point")
	proto.RegisterType((*Span)(nil), "kythe.proto.common.Span")
	proto.RegisterType((*NodeInfo)(nil), "kythe.proto.common.NodeInfo")
	proto.RegisterType((*Diagnostic)(nil), "kythe.proto.common.Diagnostic")
	proto.RegisterType((*Link)(nil), "kythe.proto.common.Link")
	proto.RegisterType((*MarkedSource)(nil), "kythe.proto.common.MarkedSource")
	proto.RegisterEnum("kythe.proto.common.MarkedSource_Kind", MarkedSource_Kind_name, MarkedSource_Kind_value)
}
func (m *Fact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ByteOffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ByteOffset))
	}
	if m.LineNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LineNumber))
	}
	if m.ColumnOffset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ColumnOffset))
	}
	return i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Start.Size()))
		n1, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.End != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.End.Size()))
		n2, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Facts) > 0 {
		for k, _ := range m.Facts {
			dAtA[i] = 0x12
			i++
			v := m.Facts[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovCommon(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovCommon(uint64(len(k))) + byteSize
			i = encodeVarintCommon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCommon(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if len(m.Definition) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Definition)))
		i += copy(dAtA[i:], m.Definition)
	}
	return i, nil
}

func (m *Diagnostic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Diagnostic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Span.Size()))
		n3, err := m.Span.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Details) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Details)))
		i += copy(dAtA[i:], m.Details)
	}
	if len(m.ContextUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ContextUrl)))
		i += copy(dAtA[i:], m.ContextUrl)
	}
	return i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Definition) > 0 {
		for _, s := range m.Definition {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MarkedSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkedSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Kind))
	}
	if len(m.PreText) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PreText)))
		i += copy(dAtA[i:], m.PreText)
	}
	if len(m.Child) > 0 {
		for _, msg := range m.Child {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PostChildText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PostChildText)))
		i += copy(dAtA[i:], m.PostChildText)
	}
	if len(m.PostText) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PostText)))
		i += copy(dAtA[i:], m.PostText)
	}
	if m.LookupIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LookupIndex))
	}
	if m.DefaultChildrenCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.DefaultChildrenCount))
	}
	if m.AddFinalListToken {
		dAtA[i] = 0x50
		i++
		if m.AddFinalListToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Link) > 0 {
		for _, msg := range m.Link {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintCommon(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Common(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Common(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Fact) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Point) Size() (n int) {
	var l int
	_ = l
	if m.ByteOffset != 0 {
		n += 1 + sovCommon(uint64(m.ByteOffset))
	}
	if m.LineNumber != 0 {
		n += 1 + sovCommon(uint64(m.LineNumber))
	}
	if m.ColumnOffset != 0 {
		n += 1 + sovCommon(uint64(m.ColumnOffset))
	}
	return n
}

func (m *Span) Size() (n int) {
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Facts) > 0 {
		for k, v := range m.Facts {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCommon(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	l = len(m.Definition)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Diagnostic) Size() (n int) {
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ContextUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Link) Size() (n int) {
	var l int
	_ = l
	if len(m.Definition) > 0 {
		for _, s := range m.Definition {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *MarkedSource) Size() (n int) {
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovCommon(uint64(m.Kind))
	}
	l = len(m.PreText)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.PostChildText)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PostText)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LookupIndex != 0 {
		n += 1 + sovCommon(uint64(m.LookupIndex))
	}
	if m.DefaultChildrenCount != 0 {
		n += 1 + sovCommon(uint64(m.DefaultChildrenCount))
	}
	if m.AddFinalListToken {
		n += 2
	}
	if len(m.Link) > 0 {
		for _, e := range m.Link {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteOffset", wireType)
			}
			m.ByteOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNumber", wireType)
			}
			m.LineNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnOffset", wireType)
			}
			m.ColumnOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &Point{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &Point{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthCommon
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Facts == nil {
				m.Facts = make(map[string][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthCommon
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, dAtA[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.Facts[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.Facts[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Diagnostic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Diagnostic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Diagnostic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definition = append(m.Definition, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkedSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkedSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkedSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (MarkedSource_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &MarkedSource{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostChildText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostChildText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupIndex", wireType)
			}
			m.LookupIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookupIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultChildrenCount", wireType)
			}
			m.DefaultChildrenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultChildrenCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFinalListToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFinalListToken = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = append(m.Link, &Link{})
			if err := m.Link[len(m.Link)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kythe/proto/common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x63, 0x7b, 0x93, 0x9c, 0xec, 0x76, 0xcd, 0xb0, 0x42, 0x5e, 0x10, 0x69, 0x30, 0x82,
	0x46, 0x2a, 0xf2, 0xa2, 0x14, 0xa1, 0x82, 0xc4, 0xc5, 0xfe, 0x78, 0x85, 0xdb, 0x34, 0x89, 0x66,
	0xbd, 0xa2, 0xe5, 0xc6, 0xf2, 0x7a, 0x26, 0xdb, 0x91, 0x9d, 0x99, 0xc8, 0x1e, 0x57, 0x9b, 0xa7,
	0xe0, 0x96, 0xd7, 0xe0, 0x8a, 0x57, 0xe0, 0x12, 0x89, 0x17, 0x40, 0xcb, 0x8b, 0xa0, 0x99, 0x49,
	0x60, 0x29, 0x81, 0xde, 0xcd, 0xf9, 0xbe, 0xef, 0x9c, 0x33, 0xdf, 0x37, 0x03, 0x7e, 0xb1, 0x92,
	0xaf, 0xe8, 0xd1, 0xb2, 0x12, 0x52, 0x1c, 0xe5, 0x62, 0xb1, 0x10, 0x3c, 0xd4, 0x05, 0x42, 0x9a,
	0x31, 0x45, 0x68, 0x98, 0xe0, 0x73, 0x70, 0xce, 0xb3, 0x5c, 0x22, 0x04, 0x0e, 0xcf, 0x16, 0xd4,
	0xb7, 0x06, 0xd6, 0xb0, 0x8b, 0xf5, 0x19, 0x1d, 0x80, 0xfb, 0x3a, 0x2b, 0x1b, 0xea, 0xb7, 0x06,
	0xd6, 0x70, 0x17, 0x9b, 0x22, 0xe0, 0xe0, 0xce, 0x04, 0xe3, 0x12, 0x3d, 0x80, 0xde, 0xd5, 0x4a,
	0xd2, 0x54, 0xcc, 0xe7, 0x35, 0x95, 0xba, 0xd3, 0xc5, 0xa0, 0xa0, 0xa9, 0x46, 0x94, 0xa0, 0x64,
	0x9c, 0xa6, 0xbc, 0x59, 0x5c, 0xd1, 0x4a, 0x4f, 0x71, 0x31, 0x28, 0x68, 0xa2, 0x11, 0xf4, 0x31,
	0xec, 0xe5, 0xa2, 0x6c, 0x16, 0x7c, 0x33, 0xc3, 0xd6, 0x92, 0x5d, 0x03, 0x9a, 0x29, 0x01, 0x01,
	0xe7, 0x62, 0x99, 0x71, 0x74, 0x04, 0x6e, 0x2d, 0xb3, 0xca, 0x2c, 0xea, 0x8d, 0x0e, 0xc3, 0x7f,
	0xbb, 0x09, 0xf5, 0xc5, 0xb0, 0xd1, 0xa1, 0x47, 0x60, 0x53, 0x4e, 0xf4, 0xda, 0xff, 0x95, 0x2b,
	0x55, 0xf0, 0x93, 0x05, 0x9d, 0x89, 0x20, 0x34, 0xe6, 0x73, 0x81, 0xbe, 0x01, 0x77, 0x9e, 0xe5,
	0xb2, 0xf6, 0x5b, 0x03, 0x7b, 0xd8, 0x1b, 0x3d, 0xdc, 0xd6, 0xbb, 0x11, 0x87, 0x2a, 0xbe, 0x3a,
	0xe2, 0xb2, 0x5a, 0x61, 0xd3, 0x85, 0xfa, 0x00, 0x84, 0xce, 0x19, 0x67, 0x92, 0x09, 0xee, 0xbb,
	0x3a, 0xd1, 0x3b, 0xc8, 0xfb, 0x4f, 0x00, 0xfe, 0x6e, 0x42, 0x1e, 0xd8, 0x05, 0x5d, 0xad, 0x83,
	0x57, 0xc7, 0xed, 0xb9, 0x7f, 0xdd, 0x7a, 0x62, 0x3d, 0x75, 0x3a, 0x96, 0xd7, 0xc2, 0x3b, 0x92,
	0xe5, 0x05, 0x95, 0xc1, 0x0f, 0x16, 0xc0, 0x19, 0xcb, 0xae, 0xb9, 0xa8, 0x25, 0xcb, 0xd1, 0x67,
	0xe0, 0xd4, 0xcb, 0x8c, 0xaf, 0xf3, 0xf1, 0xb7, 0x5d, 0x5a, 0x05, 0x89, 0xb5, 0x0a, 0xf9, 0xd0,
	0x5e, 0xd0, 0xba, 0xce, 0xae, 0xcd, 0x9a, 0x2e, 0xde, 0x94, 0x8a, 0x21, 0x54, 0x66, 0xac, 0xac,
	0xf5, 0x7b, 0x74, 0xf1, 0xa6, 0x54, 0x0f, 0x9a, 0x0b, 0x2e, 0xe9, 0x8d, 0x4c, 0x9b, 0xaa, 0xf4,
	0x1d, 0xe3, 0x6c, 0x0d, 0x5d, 0x56, 0x65, 0x30, 0x02, 0x67, 0xcc, 0x78, 0xf1, 0x46, 0x02, 0xf6,
	0xc0, 0xfe, 0x67, 0x02, 0xc6, 0xc7, 0x53, 0xa7, 0xd3, 0xf2, 0xec, 0xe0, 0x37, 0x07, 0x76, 0x9f,
	0x67, 0x55, 0x41, 0xc9, 0x85, 0x68, 0xaa, 0x9c, 0xa2, 0xaf, 0xc0, 0x29, 0x18, 0x27, 0xda, 0xc7,
	0xfd, 0xd1, 0x27, 0xdb, 0x7c, 0xdc, 0xd5, 0x87, 0xcf, 0x18, 0x27, 0x58, 0xb7, 0xa0, 0x43, 0xe8,
	0x2c, 0x2b, 0x9a, 0xaa, 0xeb, 0x6c, 0x5c, 0x2d, 0x2b, 0x9a, 0xd0, 0x1b, 0x89, 0xbe, 0x04, 0x37,
	0x7f, 0xc5, 0x4a, 0xa2, 0x6f, 0xd3, 0x1b, 0x0d, 0xde, 0x36, 0x16, 0x1b, 0x39, 0xfa, 0x14, 0xf6,
	0x97, 0xa2, 0x96, 0xa9, 0xae, 0xcc, 0x64, 0xe3, 0x7b, 0x4f, 0xc1, 0xa7, 0x0a, 0xd5, 0xf3, 0x3f,
	0x80, 0xae, 0xd6, 0x69, 0x85, 0x79, 0xf3, 0x8e, 0x02, 0x34, 0xf9, 0x11, 0xec, 0x96, 0x42, 0x14,
	0xcd, 0x32, 0x65, 0x9c, 0xd0, 0x1b, 0x7f, 0x67, 0x60, 0x0d, 0xf7, 0x70, 0xcf, 0x60, 0xb1, 0x82,
	0xd0, 0x17, 0xf0, 0x1e, 0xa1, 0xf3, 0xac, 0x29, 0xd7, 0xab, 0x2a, 0xca, 0xd3, 0x5c, 0x34, 0x5c,
	0xfa, 0x6d, 0x2d, 0x3e, 0x58, 0xb3, 0xa7, 0x6b, 0xf2, 0x54, 0x71, 0xe8, 0x08, 0x0e, 0x32, 0x42,
	0xd2, 0x39, 0xe3, 0x59, 0x99, 0x96, 0x4c, 0xed, 0x17, 0x05, 0xe5, 0x3e, 0x0c, 0xac, 0x61, 0x07,
	0xbf, 0x93, 0x11, 0x72, 0xae, 0xa8, 0x31, 0xab, 0x65, 0xa2, 0x08, 0xf5, 0x49, 0x4a, 0xc6, 0x0b,
	0xbf, 0xa7, 0x53, 0xd8, 0xfa, 0x49, 0xd4, 0x0b, 0x62, 0xad, 0x0a, 0x7e, 0xb6, 0xc0, 0x51, 0xf1,
	0xa2, 0x36, 0xd8, 0x27, 0xd3, 0x17, 0xde, 0x3d, 0xd4, 0x01, 0x27, 0x79, 0x39, 0x8b, 0x3c, 0x0b,
	0xed, 0x41, 0x77, 0x76, 0x8c, 0x8f, 0x9f, 0x47, 0x49, 0x84, 0xbd, 0x16, 0xba, 0x0f, 0x10, 0x9f,
	0x45, 0x93, 0x24, 0x3e, 0x8f, 0x23, 0xec, 0xd9, 0xa8, 0x07, 0xed, 0xd3, 0xe9, 0x24, 0x89, 0x5e,
	0x24, 0x9e, 0x83, 0xf6, 0xa1, 0x17, 0x4f, 0xe2, 0x24, 0x3e, 0x1e, 0xc7, 0xdf, 0x47, 0xd8, 0x73,
	0xd1, 0x87, 0x70, 0xf8, 0x57, 0x73, 0x3a, 0x9e, 0x4e, 0x9f, 0x5d, 0xce, 0xd2, 0x93, 0x97, 0xa9,
	0xc6, 0xbc, 0x1d, 0xf4, 0x2e, 0xec, 0xbf, 0x09, 0xb6, 0xd1, 0x23, 0x78, 0xf8, 0x9f, 0x3d, 0xe9,
	0x77, 0x71, 0xf2, 0x6d, 0x7a, 0x16, 0x9d, 0x1f, 0x5f, 0x8e, 0x93, 0x0b, 0xaf, 0x73, 0xf2, 0xf8,
	0x97, 0xdb, 0xbe, 0xf5, 0xeb, 0x6d, 0xdf, 0xfa, 0xfd, 0xb6, 0x6f, 0xfd, 0xf8, 0x47, 0xff, 0x1e,
	0x3c, 0xc8, 0xc5, 0x22, 0xbc, 0x16, 0xe2, 0xba, 0xa4, 0x21, 0xa1, 0xaf, 0xa5, 0x10, 0x65, 0x7d,
	0xd7, 0xfe, 0xcc, 0xba, 0xda, 0xd1, 0x87, 0xc7, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x16,
	0x7e, 0x4e, 0x43, 0x05, 0x00, 0x00,
}
