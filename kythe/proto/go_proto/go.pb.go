// Code generated by protoc-gen-gogo.
// source: kythe/proto/go.proto
// DO NOT EDIT!

/*
	Package go_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/go.proto

	It has these top-level messages:
		GoDetails
*/
package go_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Go-specific details used in a CompilationUnit.
// Its type is "kythe.io/proto/kythe.proto.GoDetails".
type GoDetails struct {
	Goos     string `protobuf:"bytes,1,opt,name=goos,proto3" json:"goos,omitempty"`
	Goarch   string `protobuf:"bytes,2,opt,name=goarch,proto3" json:"goarch,omitempty"`
	Goroot   string `protobuf:"bytes,3,opt,name=goroot,proto3" json:"goroot,omitempty"`
	Gopath   string `protobuf:"bytes,4,opt,name=gopath,proto3" json:"gopath,omitempty"`
	Compiler string `protobuf:"bytes,5,opt,name=compiler,proto3" json:"compiler,omitempty"`
	// Build tags that are effective for this compilation.
	// This implicitly includes GOOS and GOARCH if provided.
	BuildTags []string `protobuf:"bytes,6,rep,name=build_tags,json=buildTags" json:"build_tags,omitempty"`
	// Whether cgo is enabled for this compilation.
	CgoEnabled bool `protobuf:"varint,7,opt,name=cgo_enabled,json=cgoEnabled,proto3" json:"cgo_enabled,omitempty"`
}

func (m *GoDetails) Reset()                    { *m = GoDetails{} }
func (m *GoDetails) String() string            { return proto.CompactTextString(m) }
func (*GoDetails) ProtoMessage()               {}
func (*GoDetails) Descriptor() ([]byte, []int) { return fileDescriptorGo, []int{0} }

func (m *GoDetails) GetGoos() string {
	if m != nil {
		return m.Goos
	}
	return ""
}

func (m *GoDetails) GetGoarch() string {
	if m != nil {
		return m.Goarch
	}
	return ""
}

func (m *GoDetails) GetGoroot() string {
	if m != nil {
		return m.Goroot
	}
	return ""
}

func (m *GoDetails) GetGopath() string {
	if m != nil {
		return m.Gopath
	}
	return ""
}

func (m *GoDetails) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *GoDetails) GetBuildTags() []string {
	if m != nil {
		return m.BuildTags
	}
	return nil
}

func (m *GoDetails) GetCgoEnabled() bool {
	if m != nil {
		return m.CgoEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*GoDetails)(nil), "kythe.proto.GoDetails")
}
func (m *GoDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Goos) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGo(dAtA, i, uint64(len(m.Goos)))
		i += copy(dAtA[i:], m.Goos)
	}
	if len(m.Goarch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGo(dAtA, i, uint64(len(m.Goarch)))
		i += copy(dAtA[i:], m.Goarch)
	}
	if len(m.Goroot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGo(dAtA, i, uint64(len(m.Goroot)))
		i += copy(dAtA[i:], m.Goroot)
	}
	if len(m.Gopath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGo(dAtA, i, uint64(len(m.Gopath)))
		i += copy(dAtA[i:], m.Gopath)
	}
	if len(m.Compiler) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGo(dAtA, i, uint64(len(m.Compiler)))
		i += copy(dAtA[i:], m.Compiler)
	}
	if len(m.BuildTags) > 0 {
		for _, s := range m.BuildTags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CgoEnabled {
		dAtA[i] = 0x38
		i++
		if m.CgoEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Go(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Go(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GoDetails) Size() (n int) {
	var l int
	_ = l
	l = len(m.Goos)
	if l > 0 {
		n += 1 + l + sovGo(uint64(l))
	}
	l = len(m.Goarch)
	if l > 0 {
		n += 1 + l + sovGo(uint64(l))
	}
	l = len(m.Goroot)
	if l > 0 {
		n += 1 + l + sovGo(uint64(l))
	}
	l = len(m.Gopath)
	if l > 0 {
		n += 1 + l + sovGo(uint64(l))
	}
	l = len(m.Compiler)
	if l > 0 {
		n += 1 + l + sovGo(uint64(l))
	}
	if len(m.BuildTags) > 0 {
		for _, s := range m.BuildTags {
			l = len(s)
			n += 1 + l + sovGo(uint64(l))
		}
	}
	if m.CgoEnabled {
		n += 2
	}
	return n
}

func sovGo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGo(x uint64) (n int) {
	return sovGo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goos = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goarch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goarch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goroot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goroot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gopath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gopath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compiler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compiler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildTags = append(m.BuildTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgoEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CgoEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kythe/proto/go.proto", fileDescriptorGo) }

var fileDescriptorGo = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xcf, 0x31, 0x4e, 0x80, 0x30,
	0x14, 0xc6, 0x71, 0x2b, 0x88, 0xf4, 0xb1, 0x98, 0xc6, 0x98, 0xc6, 0xc4, 0x4a, 0x9c, 0x98, 0x64,
	0xf0, 0x06, 0x46, 0xe3, 0x4e, 0xdc, 0x49, 0x29, 0x4d, 0x21, 0x56, 0x1f, 0x69, 0xeb, 0xe0, 0x4d,
	0xbc, 0x8f, 0x8b, 0xa3, 0x47, 0x30, 0x78, 0x11, 0x43, 0x2b, 0x6e, 0xdf, 0xff, 0xf7, 0xa6, 0x07,
	0xa7, 0x4f, 0x6f, 0x61, 0xd2, 0xed, 0xe2, 0x30, 0x60, 0x6b, 0xf0, 0x3a, 0x0e, 0x56, 0x45, 0x4d,
	0x71, 0xf5, 0x41, 0x80, 0x3e, 0xe0, 0x9d, 0x0e, 0x72, 0xb6, 0x9e, 0x31, 0xc8, 0x0d, 0xa2, 0xe7,
	0xa4, 0x26, 0x0d, 0xed, 0xe2, 0x66, 0x67, 0x50, 0x18, 0x94, 0x4e, 0x4d, 0xfc, 0x30, 0xea, 0x5f,
	0x25, 0x77, 0x88, 0x81, 0x67, 0xbb, 0x6f, 0x95, 0x7c, 0x91, 0x61, 0xe2, 0xf9, 0xee, 0x5b, 0xb1,
	0x73, 0x28, 0x15, 0x3e, 0x2f, 0xb3, 0xd5, 0x8e, 0x1f, 0xc5, 0xcb, 0x7f, 0xb3, 0x0b, 0x80, 0xe1,
	0x75, 0xb6, 0x63, 0x1f, 0xa4, 0xf1, 0xbc, 0xa8, 0xb3, 0x86, 0x76, 0x34, 0xca, 0xa3, 0x34, 0x9e,
	0x5d, 0x42, 0xa5, 0x0c, 0xf6, 0xfa, 0x45, 0x0e, 0x56, 0x8f, 0xfc, 0xb8, 0x26, 0x4d, 0xd9, 0x81,
	0x32, 0x78, 0x9f, 0xe4, 0xf6, 0xe4, 0x73, 0x15, 0xe4, 0x6b, 0x15, 0xe4, 0x7b, 0x15, 0xe4, 0xfd,
	0x47, 0x1c, 0x0c, 0x45, 0x7c, 0xef, 0xe6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x18, 0x56, 0x6c, 0x7a,
	0x03, 0x01, 0x00, 0x00,
}
