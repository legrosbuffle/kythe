// Code generated by protoc-gen-gogo.
// source: third_party/bazel/src/main/protobuf/test_status.proto
// DO NOT EDIT!

/*
	Package test_status_proto is a generated protocol buffer package.

	It is generated from these files:
		third_party/bazel/src/main/protobuf/test_status.proto

	It has these top-level messages:
		TestCase
		TestResultData
*/
package test_status_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Status data of test cases which failed (used only for printing test summary)
type FailedTestCasesStatus int32

const (
	// * Information about every test case is available.
	FailedTestCasesStatus_FULL FailedTestCasesStatus = 1
	// * Information about some test cases may be missing.
	FailedTestCasesStatus_PARTIAL FailedTestCasesStatus = 2
	// * No information about individual test cases.
	FailedTestCasesStatus_NOT_AVAILABLE FailedTestCasesStatus = 3
	// * This is an empty object still without data.
	FailedTestCasesStatus_EMPTY FailedTestCasesStatus = 4
)

var FailedTestCasesStatus_name = map[int32]string{
	1: "FULL",
	2: "PARTIAL",
	3: "NOT_AVAILABLE",
	4: "EMPTY",
}
var FailedTestCasesStatus_value = map[string]int32{
	"FULL":          1,
	"PARTIAL":       2,
	"NOT_AVAILABLE": 3,
	"EMPTY":         4,
}

func (x FailedTestCasesStatus) Enum() *FailedTestCasesStatus {
	p := new(FailedTestCasesStatus)
	*p = x
	return p
}
func (x FailedTestCasesStatus) String() string {
	return proto.EnumName(FailedTestCasesStatus_name, int32(x))
}
func (x *FailedTestCasesStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailedTestCasesStatus_value, data, "FailedTestCasesStatus")
	if err != nil {
		return err
	}
	*x = FailedTestCasesStatus(value)
	return nil
}
func (FailedTestCasesStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTestStatus, []int{0}
}

// Detailed status data for a TestRunnerAction execution.
type BlazeTestStatus int32

const (
	BlazeTestStatus_NO_STATUS                   BlazeTestStatus = 0
	BlazeTestStatus_PASSED                      BlazeTestStatus = 1
	BlazeTestStatus_FLAKY                       BlazeTestStatus = 2
	BlazeTestStatus_TIMEOUT                     BlazeTestStatus = 3
	BlazeTestStatus_FAILED                      BlazeTestStatus = 4
	BlazeTestStatus_INCOMPLETE                  BlazeTestStatus = 5
	BlazeTestStatus_REMOTE_FAILURE              BlazeTestStatus = 6
	BlazeTestStatus_FAILED_TO_BUILD             BlazeTestStatus = 7
	BlazeTestStatus_BLAZE_HALTED_BEFORE_TESTING BlazeTestStatus = 8
)

var BlazeTestStatus_name = map[int32]string{
	0: "NO_STATUS",
	1: "PASSED",
	2: "FLAKY",
	3: "TIMEOUT",
	4: "FAILED",
	5: "INCOMPLETE",
	6: "REMOTE_FAILURE",
	7: "FAILED_TO_BUILD",
	8: "BLAZE_HALTED_BEFORE_TESTING",
}
var BlazeTestStatus_value = map[string]int32{
	"NO_STATUS":                   0,
	"PASSED":                      1,
	"FLAKY":                       2,
	"TIMEOUT":                     3,
	"FAILED":                      4,
	"INCOMPLETE":                  5,
	"REMOTE_FAILURE":              6,
	"FAILED_TO_BUILD":             7,
	"BLAZE_HALTED_BEFORE_TESTING": 8,
}

func (x BlazeTestStatus) Enum() *BlazeTestStatus {
	p := new(BlazeTestStatus)
	*p = x
	return p
}
func (x BlazeTestStatus) String() string {
	return proto.EnumName(BlazeTestStatus_name, int32(x))
}
func (x *BlazeTestStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BlazeTestStatus_value, data, "BlazeTestStatus")
	if err != nil {
		return err
	}
	*x = BlazeTestStatus(value)
	return nil
}
func (BlazeTestStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTestStatus, []int{1} }

type TestCase_Type int32

const (
	TestCase_TEST_CASE      TestCase_Type = 0
	TestCase_TEST_SUITE     TestCase_Type = 1
	TestCase_TEST_DECORATOR TestCase_Type = 2
	TestCase_UNKNOWN        TestCase_Type = 3
)

var TestCase_Type_name = map[int32]string{
	0: "TEST_CASE",
	1: "TEST_SUITE",
	2: "TEST_DECORATOR",
	3: "UNKNOWN",
}
var TestCase_Type_value = map[string]int32{
	"TEST_CASE":      0,
	"TEST_SUITE":     1,
	"TEST_DECORATOR": 2,
	"UNKNOWN":        3,
}

func (x TestCase_Type) Enum() *TestCase_Type {
	p := new(TestCase_Type)
	*p = x
	return p
}
func (x TestCase_Type) String() string {
	return proto.EnumName(TestCase_Type_name, int32(x))
}
func (x *TestCase_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Type_value, data, "TestCase_Type")
	if err != nil {
		return err
	}
	*x = TestCase_Type(value)
	return nil
}
func (TestCase_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorTestStatus, []int{0, 0} }

type TestCase_Status int32

const (
	TestCase_PASSED TestCase_Status = 0
	TestCase_FAILED TestCase_Status = 1
	TestCase_ERROR  TestCase_Status = 2
)

var TestCase_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "ERROR",
}
var TestCase_Status_value = map[string]int32{
	"PASSED": 0,
	"FAILED": 1,
	"ERROR":  2,
}

func (x TestCase_Status) Enum() *TestCase_Status {
	p := new(TestCase_Status)
	*p = x
	return p
}
func (x TestCase_Status) String() string {
	return proto.EnumName(TestCase_Status_name, int32(x))
}
func (x *TestCase_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Status_value, data, "TestCase_Status")
	if err != nil {
		return err
	}
	*x = TestCase_Status(value)
	return nil
}
func (TestCase_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorTestStatus, []int{0, 1} }

// TestCase contains detailed data about all tests (cases/suites/decorators)
// ran, structured in a tree. This data will be later used to present the tests
// by the web status server.
type TestCase struct {
	Child             []*TestCase      `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	Name              *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ClassName         *string          `protobuf:"bytes,3,opt,name=class_name,json=className" json:"class_name,omitempty"`
	RunDurationMillis *int64           `protobuf:"varint,4,opt,name=run_duration_millis,json=runDurationMillis" json:"run_duration_millis,omitempty"`
	Result            *string          `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	Type              *TestCase_Type   `protobuf:"varint,6,opt,name=type,enum=blaze.TestCase_Type" json:"type,omitempty"`
	Status            *TestCase_Status `protobuf:"varint,7,opt,name=status,enum=blaze.TestCase_Status" json:"status,omitempty"`
	Run               *bool            `protobuf:"varint,8,opt,name=run,def=1" json:"run,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *TestCase) Reset()                    { *m = TestCase{} }
func (m *TestCase) String() string            { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()               {}
func (*TestCase) Descriptor() ([]byte, []int) { return fileDescriptorTestStatus, []int{0} }

const Default_TestCase_Run bool = true

func (m *TestCase) GetChild() []*TestCase {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *TestCase) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TestCase) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return ""
}

func (m *TestCase) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestCase) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *TestCase) GetType() TestCase_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TestCase_TEST_CASE
}

func (m *TestCase) GetStatus() TestCase_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TestCase_PASSED
}

func (m *TestCase) GetRun() bool {
	if m != nil && m.Run != nil {
		return *m.Run
	}
	return Default_TestCase_Run
}

// TestResultData holds the outcome data for a single test action (A
// single test rule can result in multiple actions due to sharding and
// runs_per_test settings.)
type TestResultData struct {
	// The following two fields are used for TestRunnerAction caching.
	// This reflects the fact that failing tests are successful
	// actions that might be cached, depending on option settings.
	Cachable   *bool `protobuf:"varint,1,opt,name=cachable" json:"cachable,omitempty"`
	TestPassed *bool `protobuf:"varint,2,opt,name=test_passed,json=testPassed" json:"test_passed,omitempty"`
	// Following data is informational.
	Status      *BlazeTestStatus `protobuf:"varint,3,opt,name=status,enum=blaze.BlazeTestStatus,def=0" json:"status,omitempty"`
	FailedLogs  []string         `protobuf:"bytes,4,rep,name=failed_logs,json=failedLogs" json:"failed_logs,omitempty"`
	Warning     []string         `protobuf:"bytes,5,rep,name=warning" json:"warning,omitempty"`
	HasCoverage *bool            `protobuf:"varint,6,opt,name=has_coverage,json=hasCoverage" json:"has_coverage,omitempty"`
	// Returns if this was cached in remote execution.
	RemotelyCached *bool `protobuf:"varint,7,opt,name=remotely_cached,json=remotelyCached" json:"remotely_cached,omitempty"`
	// Returns true if this was executed remotely
	IsRemoteStrategy *bool `protobuf:"varint,8,opt,name=is_remote_strategy,json=isRemoteStrategy" json:"is_remote_strategy,omitempty"`
	// All associated test times (in ms).
	TestTimes []int64 `protobuf:"varint,9,rep,name=test_times,json=testTimes" json:"test_times,omitempty"`
	// Passed log paths. Set if the test passed.
	PassedLog *string `protobuf:"bytes,10,opt,name=passed_log,json=passedLog" json:"passed_log,omitempty"`
	// Test times, without remote execution overhead (in ms).
	TestProcessTimes []int64 `protobuf:"varint,11,rep,name=test_process_times,json=testProcessTimes" json:"test_process_times,omitempty"`
	// Total time in ms.
	RunDurationMillis *int64 `protobuf:"varint,12,opt,name=run_duration_millis,json=runDurationMillis" json:"run_duration_millis,omitempty"`
	// Start time of the test action in ms since the epoch.
	StartTimeMillisEpoch *int64 `protobuf:"varint,15,opt,name=start_time_millis_epoch,json=startTimeMillisEpoch" json:"start_time_millis_epoch,omitempty"`
	// Additional build info
	TestCase         *TestCase              `protobuf:"bytes,13,opt,name=test_case,json=testCase" json:"test_case,omitempty"`
	FailedStatus     *FailedTestCasesStatus `protobuf:"varint,14,opt,name=failed_status,json=failedStatus,enum=blaze.FailedTestCasesStatus" json:"failed_status,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *TestResultData) Reset()                    { *m = TestResultData{} }
func (m *TestResultData) String() string            { return proto.CompactTextString(m) }
func (*TestResultData) ProtoMessage()               {}
func (*TestResultData) Descriptor() ([]byte, []int) { return fileDescriptorTestStatus, []int{1} }

const Default_TestResultData_Status BlazeTestStatus = BlazeTestStatus_NO_STATUS

func (m *TestResultData) GetCachable() bool {
	if m != nil && m.Cachable != nil {
		return *m.Cachable
	}
	return false
}

func (m *TestResultData) GetTestPassed() bool {
	if m != nil && m.TestPassed != nil {
		return *m.TestPassed
	}
	return false
}

func (m *TestResultData) GetStatus() BlazeTestStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_TestResultData_Status
}

func (m *TestResultData) GetFailedLogs() []string {
	if m != nil {
		return m.FailedLogs
	}
	return nil
}

func (m *TestResultData) GetWarning() []string {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (m *TestResultData) GetHasCoverage() bool {
	if m != nil && m.HasCoverage != nil {
		return *m.HasCoverage
	}
	return false
}

func (m *TestResultData) GetRemotelyCached() bool {
	if m != nil && m.RemotelyCached != nil {
		return *m.RemotelyCached
	}
	return false
}

func (m *TestResultData) GetIsRemoteStrategy() bool {
	if m != nil && m.IsRemoteStrategy != nil {
		return *m.IsRemoteStrategy
	}
	return false
}

func (m *TestResultData) GetTestTimes() []int64 {
	if m != nil {
		return m.TestTimes
	}
	return nil
}

func (m *TestResultData) GetPassedLog() string {
	if m != nil && m.PassedLog != nil {
		return *m.PassedLog
	}
	return ""
}

func (m *TestResultData) GetTestProcessTimes() []int64 {
	if m != nil {
		return m.TestProcessTimes
	}
	return nil
}

func (m *TestResultData) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestResultData) GetStartTimeMillisEpoch() int64 {
	if m != nil && m.StartTimeMillisEpoch != nil {
		return *m.StartTimeMillisEpoch
	}
	return 0
}

func (m *TestResultData) GetTestCase() *TestCase {
	if m != nil {
		return m.TestCase
	}
	return nil
}

func (m *TestResultData) GetFailedStatus() FailedTestCasesStatus {
	if m != nil && m.FailedStatus != nil {
		return *m.FailedStatus
	}
	return FailedTestCasesStatus_FULL
}

func init() {
	proto.RegisterType((*TestCase)(nil), "blaze.TestCase")
	proto.RegisterType((*TestResultData)(nil), "blaze.TestResultData")
	proto.RegisterEnum("blaze.FailedTestCasesStatus", FailedTestCasesStatus_name, FailedTestCasesStatus_value)
	proto.RegisterEnum("blaze.BlazeTestStatus", BlazeTestStatus_name, BlazeTestStatus_value)
	proto.RegisterEnum("blaze.TestCase_Type", TestCase_Type_name, TestCase_Type_value)
	proto.RegisterEnum("blaze.TestCase_Status", TestCase_Status_name, TestCase_Status_value)
}
func (m *TestCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Child) > 0 {
		for _, msg := range m.Child {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTestStatus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.ClassName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(len(*m.ClassName)))
		i += copy(dAtA[i:], *m.ClassName)
	}
	if m.RunDurationMillis != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.RunDurationMillis))
	}
	if m.Result != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(len(*m.Result)))
		i += copy(dAtA[i:], *m.Result)
	}
	if m.Type != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.Type))
	}
	if m.Status != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.Status))
	}
	if m.Run != nil {
		dAtA[i] = 0x40
		i++
		if *m.Run {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestResultData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResultData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cachable != nil {
		dAtA[i] = 0x8
		i++
		if *m.Cachable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TestPassed != nil {
		dAtA[i] = 0x10
		i++
		if *m.TestPassed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.Status))
	}
	if len(m.FailedLogs) > 0 {
		for _, s := range m.FailedLogs {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Warning) > 0 {
		for _, s := range m.Warning {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.HasCoverage != nil {
		dAtA[i] = 0x30
		i++
		if *m.HasCoverage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RemotelyCached != nil {
		dAtA[i] = 0x38
		i++
		if *m.RemotelyCached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsRemoteStrategy != nil {
		dAtA[i] = 0x40
		i++
		if *m.IsRemoteStrategy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TestTimes) > 0 {
		for _, num := range m.TestTimes {
			dAtA[i] = 0x48
			i++
			i = encodeVarintTestStatus(dAtA, i, uint64(num))
		}
	}
	if m.PassedLog != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(len(*m.PassedLog)))
		i += copy(dAtA[i:], *m.PassedLog)
	}
	if len(m.TestProcessTimes) > 0 {
		for _, num := range m.TestProcessTimes {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTestStatus(dAtA, i, uint64(num))
		}
	}
	if m.RunDurationMillis != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.RunDurationMillis))
	}
	if m.TestCase != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(m.TestCase.Size()))
		n1, err := m.TestCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FailedStatus != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.FailedStatus))
	}
	if m.StartTimeMillisEpoch != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTestStatus(dAtA, i, uint64(*m.StartTimeMillisEpoch))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64TestStatus(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TestStatus(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTestStatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestCase) Size() (n int) {
	var l int
	_ = l
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovTestStatus(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTestStatus(uint64(l))
	}
	if m.ClassName != nil {
		l = len(*m.ClassName)
		n += 1 + l + sovTestStatus(uint64(l))
	}
	if m.RunDurationMillis != nil {
		n += 1 + sovTestStatus(uint64(*m.RunDurationMillis))
	}
	if m.Result != nil {
		l = len(*m.Result)
		n += 1 + l + sovTestStatus(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovTestStatus(uint64(*m.Type))
	}
	if m.Status != nil {
		n += 1 + sovTestStatus(uint64(*m.Status))
	}
	if m.Run != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestResultData) Size() (n int) {
	var l int
	_ = l
	if m.Cachable != nil {
		n += 2
	}
	if m.TestPassed != nil {
		n += 2
	}
	if m.Status != nil {
		n += 1 + sovTestStatus(uint64(*m.Status))
	}
	if len(m.FailedLogs) > 0 {
		for _, s := range m.FailedLogs {
			l = len(s)
			n += 1 + l + sovTestStatus(uint64(l))
		}
	}
	if len(m.Warning) > 0 {
		for _, s := range m.Warning {
			l = len(s)
			n += 1 + l + sovTestStatus(uint64(l))
		}
	}
	if m.HasCoverage != nil {
		n += 2
	}
	if m.RemotelyCached != nil {
		n += 2
	}
	if m.IsRemoteStrategy != nil {
		n += 2
	}
	if len(m.TestTimes) > 0 {
		for _, e := range m.TestTimes {
			n += 1 + sovTestStatus(uint64(e))
		}
	}
	if m.PassedLog != nil {
		l = len(*m.PassedLog)
		n += 1 + l + sovTestStatus(uint64(l))
	}
	if len(m.TestProcessTimes) > 0 {
		for _, e := range m.TestProcessTimes {
			n += 1 + sovTestStatus(uint64(e))
		}
	}
	if m.RunDurationMillis != nil {
		n += 1 + sovTestStatus(uint64(*m.RunDurationMillis))
	}
	if m.TestCase != nil {
		l = m.TestCase.Size()
		n += 1 + l + sovTestStatus(uint64(l))
	}
	if m.FailedStatus != nil {
		n += 1 + sovTestStatus(uint64(*m.FailedStatus))
	}
	if m.StartTimeMillisEpoch != nil {
		n += 1 + sovTestStatus(uint64(*m.StartTimeMillisEpoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestStatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTestStatus(x uint64) (n int) {
	return sovTestStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &TestCase{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClassName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunDurationMillis", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunDurationMillis = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Result = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v TestCase_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TestCase_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TestCase_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TestCase_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Run = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTestStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResultData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResultData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResultData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cachable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Cachable = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestPassed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TestPassed = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v BlazeTestStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (BlazeTestStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedLogs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedLogs = append(m.FailedLogs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = append(m.Warning, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCoverage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasCoverage = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotelyCached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RemotelyCached = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRemoteStrategy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRemoteStrategy = &b
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TestTimes = append(m.TestTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTestStatus
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TestTimes = append(m.TestTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimes", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassedLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PassedLog = &s
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TestProcessTimes = append(m.TestProcessTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTestStatus
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TestProcessTimes = append(m.TestProcessTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestProcessTimes", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunDurationMillis", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunDurationMillis = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestCase == nil {
				m.TestCase = &TestCase{}
			}
			if err := m.TestCase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedStatus", wireType)
			}
			var v FailedTestCasesStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (FailedTestCasesStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedStatus = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMillisEpoch", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTimeMillisEpoch = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTestStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTestStatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTestStatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTestStatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTestStatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestStatus   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("third_party/bazel/src/main/protobuf/test_status.proto", fileDescriptorTestStatus)
}

var fileDescriptorTestStatus = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x8e, 0xda, 0x46,
	0x14, 0x5e, 0xaf, 0x81, 0x35, 0x87, 0x5d, 0x70, 0x26, 0xe9, 0xd6, 0xea, 0xcf, 0x2e, 0x5d, 0xa9,
	0x0a, 0x4a, 0x23, 0x23, 0x45, 0xca, 0x45, 0x72, 0x67, 0x60, 0x68, 0x51, 0x0c, 0x46, 0x83, 0x69,
	0x95, 0xde, 0x8c, 0x06, 0x33, 0x01, 0x4b, 0x06, 0x23, 0xcf, 0xb0, 0x11, 0xb9, 0xeb, 0x33, 0xf4,
	0xa6, 0xcf, 0xd0, 0x27, 0xe9, 0x65, 0x1f, 0xa1, 0xda, 0xbe, 0x48, 0x35, 0x33, 0x66, 0xd5, 0xac,
	0x92, 0x1b, 0xcb, 0xf3, 0x7d, 0x67, 0xce, 0x9c, 0x9f, 0xef, 0x83, 0x97, 0x72, 0x9d, 0x16, 0x4b,
	0xba, 0x63, 0x85, 0x3c, 0x74, 0x17, 0xec, 0x03, 0xcf, 0xba, 0xa2, 0x48, 0xba, 0x1b, 0x96, 0x6e,
	0xbb, 0xbb, 0x22, 0x97, 0xf9, 0x62, 0xff, 0xae, 0x2b, 0xb9, 0x90, 0x54, 0x48, 0x26, 0xf7, 0xc2,
	0xd7, 0x20, 0xaa, 0x2e, 0x32, 0xf6, 0x81, 0xdf, 0xfc, 0x6e, 0x83, 0x13, 0x73, 0x21, 0xfb, 0x4c,
	0x70, 0xf4, 0x3d, 0x54, 0x93, 0x75, 0x9a, 0x2d, 0x3d, 0xab, 0x6d, 0x77, 0x1a, 0x2f, 0x5a, 0xbe,
	0x8e, 0xf1, 0x8f, 0x3c, 0x31, 0x2c, 0x42, 0x50, 0xd9, 0xb2, 0x0d, 0xf7, 0x4e, 0xdb, 0x56, 0xa7,
	0x4e, 0xf4, 0x3f, 0xfa, 0x16, 0x20, 0xc9, 0x98, 0x10, 0x54, 0x33, 0xb6, 0x66, 0xea, 0x1a, 0x99,
	0x28, 0xda, 0x87, 0xc7, 0xc5, 0x7e, 0x4b, 0x97, 0xfb, 0x82, 0xc9, 0x34, 0xdf, 0xd2, 0x4d, 0x9a,
	0x65, 0xa9, 0xf0, 0x2a, 0x6d, 0xab, 0x63, 0x93, 0x47, 0xc5, 0x7e, 0x3b, 0x28, 0x99, 0xb1, 0x26,
	0xd0, 0x25, 0xd4, 0x0a, 0x2e, 0xf6, 0x99, 0xf4, 0xaa, 0x3a, 0x55, 0x79, 0x42, 0x1d, 0xa8, 0xc8,
	0xc3, 0x8e, 0x7b, 0xb5, 0xb6, 0xd5, 0x69, 0xbe, 0x78, 0xf2, 0xa0, 0x40, 0x3f, 0x3e, 0xec, 0x38,
	0xd1, 0x11, 0xc8, 0x87, 0x9a, 0xe9, 0xd7, 0x3b, 0xd3, 0xb1, 0x97, 0x0f, 0x63, 0x67, 0x9a, 0x25,
	0x65, 0x14, 0xba, 0x04, 0xbb, 0xd8, 0x6f, 0x3d, 0xa7, 0x6d, 0x75, 0x9c, 0xd7, 0x15, 0x59, 0xec,
	0x39, 0x51, 0xc0, 0xcd, 0x10, 0x2a, 0x2a, 0x2b, 0xba, 0x80, 0x7a, 0x8c, 0x67, 0x31, 0xed, 0x07,
	0x33, 0xec, 0x9e, 0xa0, 0x26, 0x80, 0x3e, 0xce, 0xe6, 0xa3, 0x18, 0xbb, 0x16, 0x42, 0xd0, 0xd4,
	0xe7, 0x01, 0xee, 0x47, 0x24, 0x88, 0x23, 0xe2, 0x9e, 0xa2, 0x06, 0x9c, 0xcd, 0x27, 0x6f, 0x26,
	0xd1, 0x2f, 0x13, 0xd7, 0xbe, 0xf9, 0x01, 0x6a, 0xe6, 0x45, 0x04, 0x50, 0x9b, 0x06, 0xb3, 0x19,
	0x1e, 0xb8, 0x27, 0xea, 0x7f, 0x18, 0x8c, 0x42, 0x3c, 0x70, 0x2d, 0x54, 0x87, 0x2a, 0x26, 0x44,
	0xdd, 0xbc, 0xf9, 0xad, 0x0a, 0x4d, 0x55, 0x28, 0xd1, 0x5d, 0x0f, 0x98, 0x64, 0xe8, 0x2b, 0x70,
	0x12, 0x96, 0xac, 0xd9, 0x22, 0xe3, 0x9e, 0xa5, 0x8a, 0x24, 0xf7, 0x67, 0x74, 0x0d, 0x0d, 0xbd,
	0xe0, 0x1d, 0x13, 0x82, 0x2f, 0xf5, 0x5e, 0x1c, 0x02, 0x0a, 0x9a, 0x6a, 0x04, 0xbd, 0xba, 0x1f,
	0x86, 0xfd, 0xd1, 0x30, 0x7a, 0xea, 0xab, 0x1e, 0x32, 0xa5, 0xbd, 0xae, 0x4f, 0x22, 0x3a, 0x8b,
	0x83, 0x78, 0x3e, 0xbb, 0x9f, 0xcb, 0x35, 0x34, 0xde, 0xb1, 0x34, 0xe3, 0x4b, 0x9a, 0xe5, 0x2b,
	0xb5, 0x31, 0xbb, 0x53, 0x27, 0x60, 0xa0, 0x30, 0x5f, 0x09, 0xe4, 0xc1, 0xd9, 0x7b, 0x56, 0x6c,
	0xd3, 0xed, 0xca, 0xab, 0x6a, 0xf2, 0x78, 0x44, 0xdf, 0xc1, 0xf9, 0x9a, 0x09, 0x9a, 0xe4, 0xb7,
	0xbc, 0x60, 0x2b, 0xb3, 0x34, 0x87, 0x34, 0xd6, 0x4c, 0xf4, 0x4b, 0x08, 0x3d, 0x85, 0x56, 0xc1,
	0x37, 0xb9, 0xe4, 0xd9, 0x81, 0xaa, 0x76, 0xf8, 0x52, 0xaf, 0xcb, 0x21, 0xcd, 0x23, 0xdc, 0xd7,
	0x28, 0x7a, 0x0e, 0x28, 0x15, 0xd4, 0x80, 0x54, 0xc8, 0x82, 0x49, 0xbe, 0x3a, 0x98, 0x6d, 0x11,
	0x37, 0x15, 0x44, 0x13, 0xb3, 0x12, 0x57, 0x6a, 0xd4, 0x03, 0x91, 0xe9, 0x86, 0x0b, 0xaf, 0xde,
	0xb6, 0x3b, 0x36, 0xa9, 0x2b, 0x24, 0x56, 0x80, 0xa2, 0xcd, 0xa8, 0x54, 0x4f, 0x1e, 0x18, 0xb1,
	0x1a, 0x24, 0xcc, 0x57, 0xea, 0x2d, 0x33, 0xce, 0x22, 0x4f, 0xb8, 0x10, 0x65, 0x96, 0x86, 0xce,
	0xe2, 0xea, 0xa9, 0x1a, 0xc2, 0x24, 0xfb, 0x8c, 0xb4, 0xcf, 0x3f, 0x27, 0xed, 0xe7, 0xa0, 0x2b,
	0xa1, 0x09, 0x13, 0xdc, 0xbb, 0x68, 0x5b, 0x9f, 0x32, 0x9a, 0x23, 0x8f, 0x96, 0x0c, 0xe0, 0xa2,
	0x1c, 0x7f, 0xb9, 0xc0, 0xa6, 0x5e, 0xe0, 0x37, 0xe5, 0x8d, 0xa1, 0xe6, 0x8e, 0xf7, 0x44, 0xa9,
	0xe9, 0x73, 0x73, 0xa5, 0xd4, 0xdb, 0x4b, 0xf8, 0x52, 0x48, 0x56, 0x98, 0x69, 0x94, 0xe5, 0x51,
	0xbe, 0xcb, 0x93, 0xb5, 0xd7, 0xd2, 0x45, 0x3e, 0xd1, 0xb4, 0xea, 0xc6, 0x94, 0x88, 0x15, 0xf7,
	0x2c, 0x84, 0x2f, 0x3e, 0x99, 0x1d, 0x39, 0x50, 0x19, 0xce, 0xc3, 0xd0, 0xb5, 0x94, 0xc0, 0xa7,
	0x01, 0x89, 0x47, 0x41, 0xe8, 0x9e, 0xa2, 0x47, 0x70, 0x31, 0x89, 0x62, 0x1a, 0xfc, 0x1c, 0x8c,
	0xc2, 0xa0, 0x17, 0x62, 0xd7, 0xd6, 0x8a, 0x1e, 0x4f, 0xe3, 0xb7, 0x6e, 0xe5, 0xd9, 0x9f, 0x16,
	0xb4, 0x1e, 0xa8, 0x4d, 0x59, 0xea, 0x5e, 0x6f, 0xc6, 0x0b, 0xa5, 0x2f, 0xb4, 0x17, 0x86, 0x61,
	0xf0, 0xe6, 0xad, 0x71, 0x51, 0x3c, 0x1a, 0xe3, 0x68, 0x1e, 0xbb, 0xf6, 0xff, 0xfc, 0x52, 0x51,
	0x16, 0x1c, 0x4d, 0xfa, 0xd1, 0x78, 0x1a, 0xe2, 0x18, 0xbb, 0x55, 0x65, 0x41, 0x82, 0xc7, 0x51,
	0x8c, 0xa9, 0x0a, 0x99, 0x13, 0xec, 0xd6, 0xd0, 0x63, 0x68, 0x99, 0x78, 0x1a, 0x47, 0xb4, 0x37,
	0x1f, 0x85, 0x03, 0xf7, 0x0c, 0x5d, 0xc3, 0xd7, 0xbd, 0x30, 0xf8, 0x15, 0xd3, 0x9f, 0x82, 0x30,
	0xc6, 0x03, 0xda, 0xc3, 0xc3, 0x88, 0x60, 0xaa, 0xfc, 0x3b, 0x9a, 0xfc, 0xe8, 0x3a, 0xbd, 0x57,
	0x7f, 0xdd, 0x5d, 0x59, 0x7f, 0xdf, 0x5d, 0x59, 0xff, 0xdc, 0x5d, 0x59, 0x7f, 0xfc, 0x7b, 0x75,
	0x02, 0x4f, 0x93, 0x7c, 0xe3, 0xaf, 0xf2, 0x7c, 0x95, 0x71, 0x7f, 0xc9, 0x6f, 0x65, 0x9e, 0x67,
	0xc2, 0x5f, 0xec, 0xd3, 0x6c, 0xe9, 0x67, 0xe9, 0xc2, 0xbf, 0x4d, 0xf9, 0x7b, 0x5f, 0xed, 0xec,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xa5, 0x21, 0x0d, 0x8e, 0x05, 0x00, 0x00,
}
